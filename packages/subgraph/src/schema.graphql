type Purpose @entity {
  id: ID!
  sender: Sender!
  purpose: String!
  createdAt: BigInt!
  transactionHash: String!
}

type Sender @entity {
  id: ID!
  address: Bytes!
  purposes: [Purpose!] @derivedFrom(field: "sender")
  createdAt: BigInt!
  purposeCount: BigInt!
}

enum LiquiditySource {
  YIELD
  NOTIONAL
}

type Instrument @entity {
  id: ID!
  base: String!
  quote: String!
  liquiditySource: LiquiditySource
  maturity: BigInt!
  symbol: String!
}

type Position @entity {
  id: ID!
  positionId: Int!
  createdAt: BigInt!
  instrument: Instrument!
  collateral: BigInt!
  openQuantity: BigInt!
  openCost: BigInt!
  protocolFees: BigInt!
  leverage: Int!
}

type Trader @entity {
  id: ID!
  address: Bytes!
  createdAt: BigInt!
  openPositions: [[Position!]!]
  closedPositions: [[Position!]!]
  totalPositionsCount: BigInt!
}
